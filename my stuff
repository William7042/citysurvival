<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Night City Game</title>
  <style>
    body { margin:0; overflow:hidden; background:#000; color:#fff; font-family:Arial,sans-serif;}
    #gameCanvas { display:block; background:#111; }
    #gameUI { position:absolute; top:10px; left:10px; background:rgba(0,0,0,0.7); padding:8px; border-radius:4px; }
    #shopUI, #statsUI, #bossUI {
      position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);
      background:rgba(20,20,20,0.95); border:2px solid #00aaff; border-radius:6px;
      padding:16px; display:none; z-index:10;
    }
    #shopUI h2, #statsUI h2 { margin-top:0; text-align:center; }
    #weaponList { list-style:none; padding:0; max-height:240px; overflow-y:auto; margin-bottom:12px;}
    .weapon-item {
      display:flex; align-items:center; margin-bottom:8px; cursor:pointer;
      transition:opacity 0.2s;
    }
    .weapon-item.disabled { opacity:0.4; cursor:not-allowed; }
    .weapon-item img { width:48px; height:48px; margin-right:12px;}
    #closeShop, #closeStats { background:#00aaff; border:none; padding:6px 12px; cursor:pointer; }
    #bossUI { top:10px; left:50%; transform:translateX(-50%); }
  </style>
</head>
<body>
  <canvas id="gameCanvas"></canvas>
  <div id="gameUI">Money: $<span id="moneyCounter">0</span></div>

  <!-- Shop Overlay -->
  <div id="shopUI">
    <h2>🔫 Weapon Shop</h2>
    <ul id="weaponList"></ul>
    <button id="closeShop">Close Shop</button>
  </div>

  <!-- Stats Overlay -->
  <div id="statsUI">
    <h2>📊 Stats</h2>
    <p>Kills: <span id="statKills">0</span></p>
    <p>Damage Dealt: <span id="statDamage">0</span></p>
    <button id="closeStats">Close Stats</button>
  </div>

  <!-- Boss Health Bar -->
  <div id="bossUI">
    <strong>👹 Boss Health:</strong> <span id="bossHealth">100%</span>
  </div>

  <script type="module">
  // ========= Utility for Placeholder Images =========
  function createPlaceholderImage(color = '#888', width = 48, height = 48) {
    const cvs = document.createElement('canvas');
    cvs.width = width;
    cvs.height = height;
    const ctx = cvs.getContext('2d');
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, width, height);
    return cvs;
  }

  function loadImage(src, placeholderColor = '#888', w = 48, h = 48) {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = () => {
        console.warn(`⚠️  Failed to load ${src}, using placeholder.`);
        resolve(createPlaceholderImage(placeholderColor, w, h));
      };
      img.src = src;
    });
  }

  // ========= Weapons Data =========
  const weapons = [
    { id:'atom',  name:'AtomGun',  basePrice:100,  baseDPS:10,  level:1, spriteSrc:'assets/images/weapons/atom.png' },
    { id:'laser', name:'LazerGun', basePrice:1000, baseDPS:100, level:1, spriteSrc:'assets/images/weapons/lazer.png' }
  ];
  weapons.forEach(w => {
    w.price = () => Math.floor(w.basePrice * Math.pow(1.5, w.level-1));
    w.dps   = () => w.baseDPS * (1 + (w.level-1)*0.2);
    w.upgradeCost = () => Math.floor(w.basePrice * Math.pow(2, w.level-1));
  });
  let currentWeapon = weapons[0];

  // ========= Game Setup =========
  const canvas = document.getElementById('gameCanvas');
  const ctx    = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height= window.innerHeight;

  let playerMoney = 0;
  let stats = { kills:0, damage:0 };
  let bossActive = false;
  let bossDefeated= false;

  const player = { x:100, y:canvas.height-150, w:50, h:80, speed:5, facingRight:true };

  const boss = { health:500, maxHealth:500, x:canvas.width+200, y:canvas.height-200, w:150, h:150, speed:2 };

  const moneyCounter = document.getElementById('moneyCounter');
  const shopUI       = document.getElementById('shopUI');
  const weaponList   = document.getElementById('weaponList');
  const closeShop    = document.getElementById('closeShop');
  const statsUI      = document.getElementById('statsUI');
  const statKills    = document.getElementById('statKills');
  const statDamage   = document.getElementById('statDamage');
  const closeStats   = document.getElementById('closeStats');
  const bossHealthEl = document.getElementById('bossHealth');

  const keys = {};
  window.addEventListener('keydown', e => keys[e.key]=true);
  window.addEventListener('keyup',   e => keys[e.key]=false);

  // ========= Shop Logic =========
  async function initShop() {
    await Promise.all(weapons.map(w =>
      loadImage(w.spriteSrc, '#00aaff', 60, 60).then(img=>w.sprite=img)
    ));
    window.addEventListener('keydown', e => {
      if (e.key==='s') {
        renderShop();
        shopUI.style.display='block';
      }
    });
    closeShop.onclick = ()=> shopUI.style.display='none';
  }
  function renderShop() {
    weaponList.innerHTML='';
    weapons.forEach(w => {
      const li = document.createElement('li');
      const affordable = playerMoney >= w.price();
      li.className = 'weapon-item' + (affordable?'':' disabled');
      li.innerHTML=`
        <img src="${w.sprite.src}" alt="${w.name}" />
        <div>
          <strong>${w.name} Lv.${w.level}</strong><br>
          Buy: $${w.price()} • Upg: $${w.upgradeCost()}<br>
          DPS: ${w.dps().toFixed(1)}
        </div>`;
      li.onclick = ()=>{
        if (!affordable) return;
        if (playerMoney >= w.price()) {
          playerMoney -= w.price();
          currentWeapon = w;
        } else if (playerMoney >= w.upgradeCost()) {
          playerMoney -= w.upgradeCost();
          w.level++;
        }
        moneyCounter.textContent = playerMoney;
        renderShop();
      };
      weaponList.appendChild(li);
    });
  }

  // ========= Stats Logic =========
  function initStats() {
    window.addEventListener('keydown', e=>{
      if (e.key==='t') {
        statKills.textContent  = stats.kills;
        statDamage.textContent = stats.damage;
        statsUI.style.display='block';
      }
    });
    closeStats.onclick = ()=> statsUI.style.display='none';
  }
  function recordKill(dmg){
    stats.kills++;
    stats.damage+=dmg;
  }

  // ========= Boss Logic =========
  function updateBoss(){
    if (!bossActive && playerMoney >= 500) {
      bossActive = true;
      console.log('Boss fight started!');
    }
    if (!bossActive || bossDefeated) return;
    if (boss.x > player.x + 100) boss.x -= boss.speed;
    if (keys[' '] && Math.abs(boss.x - player.x)<100) {
      boss.health -= currentWeapon.dps();
      if (boss.health <= 0) {
        bossDefeated = true;
        recordKill(500);
      }
    }
  }
  function drawBoss(){
    if (!bossActive || bossDefeated) return;
    ctx.fillStyle='#a00';
    ctx.fillRect(boss.x, boss.y, boss.w, boss.h);
    const pct = Math.max(0, boss.health/boss.maxHealth*100);
    bossHealthEl.textContent = pct.toFixed(0)+'%';
  }

  // ========= Game Loop =========
  async function main(){
    await initShop();
    initStats();

    function update(){
      if (keys['ArrowLeft'])  { player.x-=player.speed; player.facingRight=false; }
      if (keys['ArrowRight']) { player.x+=player.speed; player.facingRight=true; }
      if (keys['m']) { playerMoney++; moneyCounter.textContent=playerMoney; }
      updateBoss();
    }
    function draw(){
      ctx.clearRect(0,0,canvas.width,canvas.height);
      ctx.fillStyle = '#0f0';
      ctx.fillRect(player.x, player.y, player.w, player.h);
      if (currentWeapon && currentWeapon.sprite) {
        const ox = player.facingRight ? player.w : -60;
        ctx.drawImage(currentWeapon.sprite, player.x+ox, player.y+20, 60,60);
      }
      drawBoss();
    }
    function loop(){
      update();
      draw();
      if (!bossDefeated) requestAnimationFrame(loop);
      else console.log('You beat the boss!');
    }
    loop();
  }
  window.onload = main;
  </script>

  <!--
    ────────────────────────────────────────────────
    HOW TO RUN:

    1. Clone or upload this file to your GitHub repo.
    2. Serve with a local server:
       - VSCode extension "Live Server", OR
       - Terminal: `python -m http.server 8000`
       - Open http://localhost:8000
    3. Controls:
       • Arrow Keys ◀/▶ = Move player  
       • M = Earn Money (demo)  
       • S = Open/close Shop  
       • T = Open/close Stats  
       • SPACE = Attack Boss (when close)  
    ────────────────────────────────────────────────
  -->
</body>
</html>
